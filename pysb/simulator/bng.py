from pysb.simulator.base import Simulator, SimulationResult
from pysb.bng import BngFileInterface, load_equations
import numpy as np


class BngSimulator(Simulator):
    _supports = {
        'multi_initials':     True,
        'multi_param_values': True
    }

    def __init__(self, model, tspan=None, cleanup=True, verbose=False):
        super(BngSimulator, self).__init__(model, tspan=tspan,
                                           verbose=verbose)
        self.cleanup = cleanup
        self._outdir = None

    def run(self, tspan=None, initials=None, param_values=None, n_sim=1,
            method='ssa', output_dir=None, output_file_basename=None,
            cleanup=True, verbose=False, **additional_args):
        """
        Simulate a model with BNG's SSA simulator and return the trajectories.

        Parameters
        ----------
        tspan: vector-like
            time span of simulation
        initials: vector-like, optional
            initial conditions of model
        param_values : vector-like or dictionary, optional
            Values to use for every parameter in the model. Ordering is
            determined by the order of model.parameters.
            If not specified, parameter values will be taken directly from
            model.parameters.
        n_sim: int, optional
            number of simulations to run
        method : str
            Type of simulation to run. Must be one of
            ['ssa', 'nf', 'pla', 'ode']
        output_dir : string, optional
            Location for temporary files generated by BNG. If None (the
            default), uses a temporary directory provided by the system. A
            temporary directory with a random name is created within the
            supplied location.
        output_file_basename : string, optional
            This argument is used as a prefix for the temporary BNG
            output directory, rather than the individual files.
        cleanup : bool, optional
            If True (default), delete the temporary files after the simulation is
            finished. If False, leave them in place. Useful for debugging.
        verbose: bool, optional
            If True, print BNG screen output.
        additional_args: kwargs, optional
            Additional arguments to pass to BioNetGen

        """
        super(BngSimulator, self).run(tspan=tspan,
                                      initials=initials,
                                      param_values=param_values
                                      )

        if method not in ['ssa', 'nf', 'pla', 'ode']:
            raise ValueError("Method must be one of ['ssa', 'nf', 'pla', "
                             "'ode']")
        additional_args['method'] = method
        additional_args['t_end'] = np.max(self.tspan)
        additional_args['n_steps'] = len(self.tspan)
        additional_args['verbose'] = verbose
        params_names = [g.name for g in self._model.parameters]

        n_param_sets = len(self.initials)
        total_sims = n_sim * n_param_sets

        self._logger.info('Running %d BNG %s simulations' % (total_sims,
                                                             method))

        with BngFileInterface(self._model, verbose=verbose,
                              output_dir=output_dir,
                              output_prefix=output_file_basename,
                              cleanup=cleanup,
                              model_additional_species=self.model.species
                              ) as bngfile:
            if method != 'nf':
                # TODO: Write existing netfile if already generated
                bngfile.action('generate_network', overwrite=True,
                               verbose=verbose)
            # bngfile.action('saveConcentrations')
            if output_file_basename is None:
                prefix = 'pysb'
            else:
                prefix = output_file_basename

            sim_prefix = 0
            for pset_idx in range(n_param_sets):
                for n in range(len(self.param_values[pset_idx])):
                    bngfile.set_parameter(params_names[n],
                                          self.param_values[pset_idx][n])
                for n in range(len(self.initials[pset_idx])):
                    bngfile.set_concentration(self._model.species[n],
                                              self.initials[pset_idx][n])
                for sim_rpt in range(n_sim):
                    tmp = additional_args.copy()
                    tmp['prefix'] = '{}{}'.format(prefix, sim_prefix)
                    bngfile.action('simulate', **tmp)
                    sim_prefix += 1
            bngfile.execute()
            if method != 'nf':
                load_equations(self.model, bngfile.net_filename)
            list_of_yfull = \
                BngFileInterface.read_simulation_results_multi(
                [bngfile.base_filename + str(n) for n in range(total_sims)])

        tout = []
        species_out = []
        obs_exp_out = []
        for i in range(total_sims):
            yfull = list_of_yfull[i]
            yfull_view = yfull.view(float).reshape(len(yfull), -1)

            tout.append(yfull_view[:, 0])

            if method != 'nf':
                species_out.append(yfull_view[:,
                                   1:(len(self.model.species) + 1)])
                if len(self.model.observables) or len(self.model.expressions):
                    obs_exp_out.append(yfull_view[:,
                                       (len(self.model.species) + 1):])
            else:
                obs_exp_out.append(yfull_view[:, 1:])

        return SimulationResult(self, tout=tout, trajectories=species_out,
                                observables_and_expressions=obs_exp_out,
                                simulations_per_param_set=n_sim)
